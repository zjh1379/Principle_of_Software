package hw7;

import java.io.*;
import static org.junit.Assert.*;
import org.junit.Test;

public class CampusPathsTest { // Rename to the name of your "main" class

	/**
	 * @param file1 
	 * @param file2
	 * @return true if file1 and file2 have the same content, false otherwise
	 * @throws IOException
	 */	
	/* compares two text files, line by line */
	private static boolean compare(String file1, String file2) throws IOException {
		BufferedReader is1 = new BufferedReader(new FileReader(file1)); // Decorator design pattern!
		BufferedReader is2 = new BufferedReader(new FileReader(file2));
		String line1, line2;
		boolean result = true;
		while ((line1=is1.readLine()) != null) {
			// System.out.println(line1);
			line2 = is2.readLine();
			if (line2 == null) {
				System.out.println(file1+" longer than "+file2);
				result = false;
				break;
			}
			if (!line1.equals(line2)) {
				System.out.println("Lines: "+line1+" and "+line2+" differ.");
				result = false;
				break;
			}
		}
		if (result && is2.readLine() != null) {
			System.out.println(file1+" shorter than "+file2);
			result = false;
		}
		is1.close();
		is2.close();
		return result;
	}
	
	private void runTest(String filename) throws IOException {
		InputStream in = System.in;
		PrintStream out = System.out;
		String inFilename = "data/"+filename+".test"; // Input filename: [filename].test here  
		String expectedFilename = "data/"+filename+".expected"; // Expected result filename: [filename].expected
		String outFilename = "data/"+filename+".out"; // Output filename: [filename].out
		BufferedInputStream is = new BufferedInputStream(new FileInputStream(inFilename));
		System.setIn(is); // redirects standard input to a file, [filename].test 
		PrintStream os = new PrintStream(new FileOutputStream(outFilename));
		System.setOut(os); // redirects standard output to a file, [filename].out 
		CampusPaths.main(null); // Call to YOUR main. May have to rename.
		System.setIn(in); // restores standard input
		System.setOut(out); // restores standard output
		assertTrue(compare(expectedFilename, outFilename)); 
		// TODO: You can implement more informative file comparison, if you would like.
		
	}
	
	
	
	
	@Test
	public void testListBuildings() throws IOException {
		runTest("test1");
	}
	
	@Test
	public void BuildingOne() {
		Building building = new Building();
		assertEquals(building.getId(),0);
		assertEquals(building.getTitle(),"");
		assertEquals(building.getX(),0);
		assertEquals(building.getY(),0);
	}
	
	@Test
	public void BuildingTwo() {
		Building building = new Building("ABC",1,2,3);
		assertEquals(building.getId(),1);
		assertEquals(building.getTitle(),"ABC");
		assertEquals(building.getX(),2);
		assertEquals(building.getY(),3);
		assertEquals(building.hashCode(),1);
	}
	
	
	@Test
	public void BuildingThree() {
		Building building = new Building("ABC",1,2,3);
		Building buildingTwo = new Building("abc",2,3,3);
		assertEquals(building.compareTo(buildingTwo),-1);
		assertEquals(building.getDirection(buildingTwo),"East");
		assertEquals(building.equals(buildingTwo),false);
		assertEquals(building.equals("ABC"),true);	
	}
	
	@Test
	public void MapCreationTest() {
		CampusMap map = new CampusMap();
		map.createNewMap("data/RPI_map_data_Nodes.csv","data/RPI_map_data_Edges.csv");
		map.CampusMap();
		
	}
	@Test
	public void testFindShortestPaths() { 
		CampusMap map1 = new CampusMap();
		map1.createNewMap("data/RPI_map_data_Nodes.csv","data/RPI_map_data_Edges.csv");
		
		assertEquals(map1.findShortestPath("",""),"Unknown building: []");
		assertEquals(map1.findShortestPath("a", "a"),"Unknown building: [a]");
		assertEquals(map1.findShortestPath("a", "b"),"Unknown building: [a]\nUnknown building: [b]");
		assertEquals(map1.findShortestPath("Sharp Hall","a"),"Unknown building: [a]");
		assertEquals(map1.findShortestPath("a","Sharp Hall"),"Unknown building: [a]");
		assertEquals(map1.findShortestPath("Sharp Hall", "Sharp Hall"),"Path from Sharp Hall to Sharp Hall:\n"
				+ "Total distance: 0.000 pixel units.");
		assertEquals(map1.findShortestPath("Polytechnic Residence Commons", "Blitman Residence Commons"),
				"There is no path from Polytechnic Residence Commons to Blitman Residence Commons.");
		assertEquals(map1.findShortestPath("","Sharp Hall"),"Unknown building: []");
		assertEquals(map1.findShortestPath("Sharp Hall",""),"Unknown building: []");
		assertEquals(map1.findShortestPath("108","Davison Hall"),"Unknown building: [108]");
		assertEquals(map1.findShortestPath("Davison Hall","124"),"Unknown building: [124]");
		assertEquals(map1.findShortestPath("15","108"),"Unknown building: [108]");
		assertEquals(map1.findShortestPath("108","15"),"Unknown building: [108]");
		assertEquals(map1.findShortestPath("Field House Houston", "EMPAC"),"Path from Field House Houston to EMPAC:"
				+ "\n\tWalk West to (Intersection 113)"
				+ "\n\tWalk West to (Intersection 111)"
				+ "\n\tWalk West to (Intersection 117)"
				+ "\n\tWalk West to (Intersection 112)"
				+ "\n\tWalk SouthWest to (2021 Peoples Avenue)"
				+ "\n\tWalk West to (Beman Park Firehouse)"
				+ "\n\tWalk West to (Alumni House)"
				+ "\n\tWalk SouthWest to (H Building)"
				+ "\n\tWalk South to (North Hall)"
				+ "\n\tWalk SouthWest to (Intersection 132)"
				+ "\n\tWalk SouthWest to (Troy Building)"
				+ "\n\tWalk SouthWest to (Intersection 133)"
				+ "\n\tWalk SouthWest to (Intersection 134)"
				+ "\n\tWalk SouthWest to (Lally Hall)"
				+ "\n\tWalk South to (Folsom Library)"
				+ "\n\tWalk SouthWest to (EMPAC)"
				+ "\nTotal distance: 1473.118 pixel units.");	
	}
}
